// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Consonant {
  id         String     @id @default(cuid())
  letter     String     @unique
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  words      Word[]
  activities Activity[]

  @@map("consonants")
}

model Word {
  id          String    @id @default(cuid())
  text        String
  syllables   Int
  difficulty  Int       @default(1) // 1-5 scale
  consonantId String
  consonant   Consonant @relation(fields: [consonantId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("words")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified Boolean   @default(false)
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relaciones
  userProgress     UserProgress[]
  sessions         Session[]
  accounts         Account[]
  activitySessions ActivitySession[]
  userAchievements UserAchievement[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("verifications")
}

model UserProgress {
  id              String   @id @default(cuid())
  userId          String?  // Opcional para usuarios no autenticados
  sessionId       String   // Mantener para sesiones anónimas
  consonantId     String
  wordsCompleted  Int      @default(0)
  totalWords      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_progress")
}

model Activity {
  id          String @id @default(cuid())
  type        ActivityType
  consonantId String?
  difficulty  Int
  metadata    Json // Configuración específica de la actividad
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  consonant   Consonant? @relation(fields: [consonantId], references: [id], onDelete: Cascade)
  sessions    ActivitySession[]
  
  @@map("activities")
}

model ActivitySession {
  id           String @id @default(cuid())
  userId       String?
  sessionId    String
  activityId   String
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  score        Int?
  timeSpent    Int? // en segundos
  wordsCorrect Int @default(0)
  wordsTotal   Int @default(0)
  metadata     Json? // Datos adicionales de la sesión
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity     Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@map("activity_sessions")
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  condition   Json // Condiciones para desbloquear
  points      Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

enum UserRole {
  USER
  ADMIN
  TEACHER
}

enum ActivityType {
  CONSONANT_PRACTICE
  SYLLABLE_GAME
  WORD_RECOGNITION
  READING_COMPREHENSION
}
